name: Release

on:
  push:
    tags: [ 'v*' ]

env:
  GO_VERSION: '1.25'

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME=nclip
        
        VERSION=${GITHUB_REF#refs/tags/}
        
        echo "Building $BINARY_NAME for $GOOS/$GOARCH..."
        go build -v \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:7}" \
          -o "dist/${BINARY_NAME}_${GOOS}_${GOARCH}" \
          ./cmd/server
          
    - name: Create archive
      run: |
        cd dist/
        for file in *; do
          tar -czf "${file}.tar.gz" "$file"
          rm "$file"
        done
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nclip-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 90

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Prepare release assets
      run: |
        mkdir -p release/
        find artifacts/ -name "*.tar.gz" | while read file; do
          cp "$file" release/
        done
        cd release/
        ls -la
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest two tags
        CURRENT_TAG=${GITHUB_REF#refs/tags/}
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > changelog.md
          git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..$CURRENT_TAG >> changelog.md
        else
          echo "## Initial Release" > changelog.md
          git log --pretty=format:"* %s (%h)" >> changelog.md
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
