name: Test

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.25']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.25'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Prepare fresh Go caches
      run: |
        # Use temporary, unique caches to avoid stale export data issues
        export GOMODCACHE=$(mktemp -d)
        export GOCACHE=$(mktemp -d)
        echo "GOMODCACHE=$GOMODCACHE" >> $GITHUB_ENV
        echo "GOCACHE=$GOCACHE" >> $GITHUB_ENV
        go env
        go version

    - name: Download dependencies
      run: go mod download

    - name: Validate import path casing
      run: |
        if find . -type f -name '*.go' -print0 | xargs -0 grep -n "internal/Lambda" | sed -n '1p'; then
          echo "ERROR: Found incorrect import path casing 'internal/Lambda'. Use 'internal/lambda' instead." >&2
          exit 1
        fi

    - name: Sanity build (exports)
      run: go build ./...

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: v2.4
        # Ensure linter runs without using any stale caches
        args: |
          --timeout=5m
          --verbose
          --skip-dirs-use-default
          --max-issues-per-linter=0
          --max-same-issues=0
          run ./...
      env:
        GOMODCACHE: ${{ env.GOMODCACHE }}
        GOCACHE: ${{ env.GOCACHE }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out results.sarif ./...
        gosec -no-fail -fmt json -out results.json ./...
        
    - name: Upload SARIF file
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          results.sarif
          results.json
        retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
#    - name: Cache Go modules
#      uses: actions/cache@v4
#      with:
#        path: |
#          ~/.cache/go-build
#          ~/go/pkg/mod
#        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
#        restore-keys: |
#          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME=nclip
        
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ $VERSION == refs/* ]]; then
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        
        echo "Building for $GOOS/$GOARCH..."
        go build -v \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:7}" \
          -o "dist/${BINARY_NAME}_${GOOS}_${GOARCH}" \
          .
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nclip-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30
