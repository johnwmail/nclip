name: Test

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.25']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.25'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Prepare fresh Go caches
      id: go-cache-paths
      run: |
        echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
        echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
        echo "Current working directory: $(pwd)"
        echo "Go version: $(go version)"
        echo "Go env: $(go env GOROOT GOPATH GOMODCACHE GOCACHE)"

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ${{ steps.go-cache-paths.outputs.go-build }}
          ${{ steps.go-cache-paths.outputs.go-mod }}
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify module
      run: |
        go mod verify
        go list -m all

    - name: Sanity build (exports)
      run: go build ./...

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m --verbose --max-issues-per-linter=0 --max-same-issues=0

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out results.sarif ./...
        gosec -no-fail -fmt json -out results.json ./...
        
    - name: Upload SARIF file
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          results.sarif
          results.json
        retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    strategy:
      matrix:
        goos: [linux]
        goarch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        BINARY_NAME=nclip
        
        VERSION=${GITHUB_REF#refs/tags/}
        if [[ $VERSION == refs/* ]]; then
          VERSION="dev-${GITHUB_SHA:0:7}"
        fi
        
        echo "Building for $GOOS/$GOARCH..."
        go build -v \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:7}" \
          -o "dist/${BINARY_NAME}_${GOOS}_${GOARCH}" \
          .
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nclip-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: nclip
        options: >-
          --health-cmd "timeout 10s bash -c 'mongosh --eval \"db.runCommand({ping: 1})\"'"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
          --health-start-period 40s
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build nclip binary
      env:
        CGO_ENABLED: 0
      run: |
        VERSION="test-${GITHUB_SHA:0:7}"
        go build -v \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.gitCommit=${GITHUB_SHA:0:7}" \
          -o nclip \
          .
        chmod +x nclip
        
    - name: Initialize MongoDB
      run: |
        # Wait for MongoDB to be ready with improved error handling
        echo "Waiting for MongoDB to be ready..."
        for i in {1..30}; do
          if mongosh --eval "db.runCommand({ping: 1})" >/dev/null 2>&1; then
            echo "MongoDB is ready!"
            break
          elif [ $i -eq 30 ]; then
            echo "MongoDB failed to become ready after 30 attempts"
            exit 1
          else
            echo "Attempt $i/30: MongoDB not ready, waiting 2s..."
            sleep 2
          fi
        done
        
        # Initialize database with test script
        echo "Initializing MongoDB with test configuration..."
        mongosh nclip < scripts/mongo-init-test.js
        echo "MongoDB initialization completed"
        
    - name: Start nclip server
      env:
        NCLIP_MONGO_URL: mongodb://localhost:27017
        NCLIP_PORT: 8080
        NCLIP_ENABLE_WEBUI: true
        NCLIP_ENABLE_METRICS: true
        GIN_MODE: release
      run: |
        echo "Starting nclip server..."
        ./nclip &
        NCLIP_PID=$!
        echo "NCLIP_PID=$NCLIP_PID" >> $GITHUB_ENV
        echo "nclip started with PID: $NCLIP_PID"
        
    - name: Run integration tests
      env:
        NCLIP_URL: http://localhost:8080
      run: |
        echo "Running integration tests..."
        bash scripts/integration-test.sh
        
    - name: Stop nclip server
      if: always()
      run: |
        if [ -n "${NCLIP_PID:-}" ]; then
          echo "Stopping nclip server (PID: $NCLIP_PID)"
          kill $NCLIP_PID || true
          sleep 2
          kill -9 $NCLIP_PID 2>/dev/null || true
        fi
        
    - name: Upload integration test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-artifacts
        path: |
          nclip
          scripts/
        retention-days: 7
